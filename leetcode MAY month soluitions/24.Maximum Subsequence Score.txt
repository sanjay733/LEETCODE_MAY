class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        int n = nums1.length;
        int[][] pairs = new int[n][2];
        for (int i = 0; i < n; i++){
            pairs[i][0] = nums1[i];
            pairs[i][1] = nums2[i];
        }
        Arrays.sort(pairs, (l1, l2) -> l2[0] - l1[0]);
        PriorityQueue<int[]> queue = new PriorityQueue(Comparator.comparingInt(l -> ((int[]) l)[1]));
        int idx = 0;
        long sum = 0, ans = 0, min = -1;
        while (idx < n){
            if (pairs[idx][1] <= min){
                idx++;
                continue;
            }
            sum += pairs[idx][0];
            queue.offer(pairs[idx++]);

            if (queue.size() < k) continue;
            min = queue.peek()[1];
            ans = Math.max(ans, sum * min);
            sum -= queue.poll()[0];

        }return ans;
    }
}